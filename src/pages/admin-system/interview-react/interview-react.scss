@mixin interview($borderColor, $backgroundColor, $linkColor) {
  border-bottom: 1px solid $borderColor;
  margin-bottom: 30px;

  & > p {
    margin: 10px 0;
    padding: 14px 24px;
    background: $backgroundColor;
    border: 1px solid $borderColor;
    display: inline-block;
  }

  & > .explain {
    margin: 10px 0;
    font-size: 15px;
  }

  & a {
    padding: 16px 0;
    display: inline-block;
    color: $linkColor;

    &:hover {
      color: rgb(0, 140, 255);
    }
  }

  & h1,
  h2 {
    padding: 4px 0;
    font-size: 15px;
  }

  & .max-border {
    @include maxWrap();
  }

  & .min-border {
    @include minWrap();
  }
}

@mixin maxWrap {
  height: 360px;
  width: 360px;
  overflow: auto;
  border: 1px solid rgb(187, 187, 187);
  display: inline-block;
  margin-right: 10px;
}

@mixin minWrap {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 120px;
  height: 120px;
  border: 1px solid rgb(223, 223, 223);
  cursor: pointer;
  user-select: none;
}

.interview-react {
  .diff,
  .inline-block,
  .interview-media,
  .column-equal,
  .promise-learn,
  .frontend-router {
    @include interview(#67ce00, #f6ffed, #448801);
  }

  .var-up,
  .em,
  .curry {
    @include interview(#e821ff, #fdf2ff, #9a07aa);
  }

  .prototype-chain,
  .one-px,
  .partial {
    @include interview(#ff533d, #fff2f0, #e0230a);
  }

  .ceiling,
  .box-sizing,
  .rem,
  .center-layout {
    @include interview(#00b792, #edfffb, #028a6f);
  }

  .sticky-footer,
  .ellipsis,
  .cross-origin {
    // @include interview(#e8b900, #ffffdd, #028a6f);
    @include interview(#3d51ff, #e8eaff, #0015d3);
  }

  .visibility_display,
  .layouts,
  .xml,
  .extend {
    @include interview(#ff8800, #ffefb8, #d37000);
  }

  .margin-collapse {
    @include interview(#ff0000, #ffe8e8, #e70404);
  }

  .triangle {
    @include interview(#ff0000, #ffe8e8, #e70404);

    .triangle-item {
      @include maxWrap();

      .triangle-one {
        display: inline-block;
        width: 0;
        height: 0;
        border-top: 60px solid #00b792;
        border-bottom: 60px solid #f00;
        border-left: 60px solid #e821ff;
        border-right: 60px solid #f80;
      }

      .triangle-one-right {
        display: inline-block;
        width: 0;
        height: 0;
        border: 60px solid transparent;
        border-left: 60px solid rgb(100, 185, 255); // 这样能画出直角三角形，直角在左下角
        border-bottom: 60px solid rgb(100, 185, 255); // 直角边是border的两倍，即120px
      }

      .triangle-two {
        width: 0;
        height: 0;
        border: 60px solid transparent;
        border-bottom: 60px solid #f00;
      }

      .triangle-two-equal {
        display: inline-block;
        width: 0;
        height: 0;
        border: 34.5px solid transparent; // 等边三角形 ( 显示部分跨度 = transparent部分宽度 * √3 )
        border-bottom: 60px solid rgb(253, 0, 0);
        position: relative;
        // 利用伪类来做边框,原理是使两个三角形重合,然后通过不同大小颜色来覆盖区分
        &::before {
          content: "";
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-51%, -29%);
          width: 0;
          height: 0;
          border: 29px solid transparent; // 等边三角形 ( 显示部分跨度 = transparent部分宽度 * √3 )
          border-bottom: 50px solid rgb(100, 185, 255);
        }
      }

      // .triangle-two-equal-border { // 带边框的三角形,就是画两个三角形重叠,可以用伪元素或者两个div重合
      //   display: inline-block;
      //   width: 0;
      //   height: 0;
      //   border: 34.5px solid transparent; // 等边三角形 ( 显示部分跨度 = transparent部分宽度 * √3 )
      //   border-bottom: 60px solid rgb(26, 153, 0);
      //   transform: scale(1.1);
      // }

      .triangle-three {
        width: 0;
        height: 0;
        border: 60px solid transparent;
        border-bottom: 120px solid #f00;
      }

      .triangle-four {
        width: 0;
        height: 0;
        // border: 60px solid transparent;
        border-top: 60px solid #00b792;
        border-right: 60px solid #f80;
        border-left: 60px solid #e821ff;
        border-bottom: 120px solid #f00;
      }
    }
  }

  .animates {
    @include interview(#e821ff, #fdf2ff, #9a07aa);

    .animates__main1 {
      @include maxWrap();

      display: flex;
      justify-content: flex-start;
      align-items: flex-start;

      .animates__wave {
        @include minWrap();

        &::before {
          content: "";
          position: absolute;
          left: 50%;
          top: 50%;
          transform: translate(-50%, -50%);
          z-index: 99999;
          width: 100%;
          height: 100%;
          border-radius: 50%;
          opacity: 0;
          transition: all 0.5s;
          background: rgb(173, 95, 245);
        }

        &:active::before {
          content: "";
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          z-index: 99999;
          width: 0;
          height: 0;
          opacity: 1;
          transition: all 0s;
        }
      }

      .animates__wave2 {
        @include minWrap();

        &::before {
          content: "";
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          border-radius: 50%;
          background: rgb(173, 95, 245);
          animation: waveAmate 1s ease-in-out 0s infinite normal forwards;
        }
      }

      .animates__3 {
        @include minWrap();

        position: relative;

        &::before {
          content: "";
          position: absolute;
          left: 50%;
          right: 50%;
          bottom: 0;
          z-index: 9999;
          height: 3px;
          background: red;
          // width: 100%; 这里width千万不能是100%
          transition: all 0.2s; // transition不能写在 &:hover::before 上，可以对比一下
        }

        &:hover::before {
          content: "";
          position: absolute;
          left: 0;
          right: 0;
          bottom: 0;
          height: 3px;
          // width: 100%; 这里width千万不能是100%
          background: red;
        }
      }
    }
  }

  .progress {
    @include interview(#3d51ff, #e8eaff, #0015d3);

    transform: scale(1);

    .progress__main {
      @include maxWrap();
    }
  }
}

@keyframes waveAmate {
  from {
    width: 0;
    height: 0;
    opacity: 1;
  }

  to {
    width: 100%;
    height: 100%;
    opacity: 0;
  }
}
